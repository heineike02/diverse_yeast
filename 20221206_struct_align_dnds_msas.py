#Make structural tree from structural MSAs generated by Nir
#
#First trim the file with clipkit default
#
#Then build tree with IQTree
#
#Input: og
#
#Output: 
#  Default trimmed protein alignment (used to make tree)
#  treefile ready for use with CodeML
#
#  Strictly trimmed protein alignment and codon alignment (used as input for codemL)
#  Phylip file used as input for Codon alignment. 



#import sys
import os
import subprocess
from Bio import SeqIO
import pandas as pd
import shutil

base_dir = os.path.normpath('/home/heineike_wsl2/alphafold')
aln_dir = base_dir + os.sep + os.path.normpath('msas/structural/tm_align/fasta_renamed') 

align_files = os.listdir(aln_dir)
selected_og_refs = [fname.split('.')[0] for fname in align_files]
print(selected_og_refs[0:10])
#os.path.normpath('/home/heineike_wsl2/Crick_LMS/projects/diverse_yeasts/alphafold')
# output_dir = base_dir + os.sep + os.path.normpath('selection_calculations/20220526_sel_calc')

#selected_ogs = ['OG4150', 'OG2603', 'OG3677', 'OG2845']

#selected_ogs = ['OG4150_REF_Scer_AF-P07256-F1-model_v2', 'OG2603_REF_Scer_AF-P50076-F1-model_v2', 'OG2845_REF_Scer_AF-P43577-F1-model_v2', 'OG3677_REF_Scer_AF-P47125-F1-model_v2', 'OG1299_REF_Scer_AF-P00549-F1-model_v2']

for og_ref in selected_og_refs: 
    print(og_ref)
    #og_ref = 'OG4150_REF_Scer_AF-P07256-F1-model_v2'
    og,ref = og_ref.split('_REF_')
    og_pep_msa_fname = base_dir + os.sep + os.path.normpath('msas/structural/tm_align/fasta_renamed/' + og_ref + '.tm.fasta')
    
    #strict trimming for codon alignments    
    print('Strict trimming')
    clipkit_cmd = ['clipkit', og_pep_msa_fname, '-m','gappy' ,'-g','0.1', '-l']
    subprocess.run(clipkit_cmd)

    #Move clipkit log and output
    suffixes = ['.clipkit','.clipkit.log' ]

    for suffix in suffixes: 
        #Move clipkit files to new folder
        shutil.move(og_pep_msa_fname + suffix, 
                    base_dir + os.sep + os.path.normpath('msas/structural/tm_align/trim_strict/' + og_ref + '.tm.fasta' + suffix)
                   )

    #Thread original alignment               
    ##Need to verify these alignments have the same AA sequence as the protein sequence and cds - i.e. that they are not trimmed 
    
    print('Thread orig alignment')
    og_cds_fname = base_dir + os.sep +  os.path.normpath('msas/structural/tm_align/cds/' + og_ref + '.tm_present.cds.fasta')
    og_cds_msa_fname = base_dir + os.sep +  os.path.normpath('msas/structural/tm_align/cds_aln/' + og_ref +  '.tm.fasta.cds.fasta')

    phykit_cmd = ['phykit', 'thread_dna',
                  '-p', og_pep_msa_fname,
                  '-n', og_cds_fname, 
                 ]
    
    with open(og_cds_msa_fname,'w') as f_cds:
        output = subprocess.run(phykit_cmd, stdout=f_cds)               

    #Make Trimmed Alignment
    print('Make Trimmed Alignment')
    msa_pep_trimmed = base_dir + os.sep + os.path.normpath('msas/structural/tm_align/trim_strict/' + og_ref + '.tm.fasta.clipkit')
    msa_cds_trimmed = base_dir + os.sep +  os.path.normpath('msas/structural/tm_align/cds_trim_strict/' + og_ref +  '.tm.fasta.clipkit.cds')
    
    phykit_cmd = ['phykit', 'thread_dna',
                  '-p', msa_pep_trimmed,
                  '-n', og_cds_msa_fname, 
                  '-c', msa_pep_trimmed + '.log'
                 ]

    with open(msa_cds_trimmed,'w') as f_cds_trimmed:
        output = subprocess.run(phykit_cmd, stdout=f_cds_trimmed)
    

    ##Rename cds alignment 
    print('Rename')
    msa_cds_trimmed_renamed = msa_cds_trimmed+'.renamed'

    #shorten the name of the fasta and build name_replace dictionary
    
    #Make the sequence name map
    og_pep_msa = SeqIO.parse(og_pep_msa_fname,'fasta')
    seq_name_map_fname = base_dir + os.sep +  os.path.normpath('msas/structural/tm_align/seq_name_map/' + og_ref + '.tm.tsv')
    with open(seq_name_map_fname,'w') as fout_seq_name: 
        fout_seq_name.write('seq_name\tseq_no\n')
        for ind, record in enumerate(og_pep_msa):
            seq_id = record.id.split('.')[0]
            fout_seq_name.write(record.id + '\t' + og + '_'+ str(ind)+'\n')
    
    seq_name_map_df = pd.read_csv(seq_name_map_fname, sep='\t')
    seq_name_map = dict(zip(seq_name_map_df['seq_name'],seq_name_map_df['seq_no']))

    msa_cds_trimmed_seqs = SeqIO.parse(msa_cds_trimmed, 'fasta')
    with open(msa_cds_trimmed_renamed,'w') as f_out: 
        for record in msa_cds_trimmed_seqs:
            new_id = seq_name_map[record.id] 
            f_out.write('>' + str(new_id) + '\n')
            f_out.write(str(record.seq) + '\n')

    print('Convet to Phylip')
    #converts fasta to PHYLIP format 
    msa_cds_trimmed_phy = msa_cds_trimmed + '.renamed.phy'
    biokit_cmd = ['biokit','file_format_converter',
                  '-i',msa_cds_trimmed_renamed, '-iff', 'fasta',
                  '-o', msa_cds_trimmed_phy,
                  '-off', 'phylip']

    subprocess.run(biokit_cmd)

    #adds I in phylip to indicate interleaved status
    msa_cds_trimmed_phy_codeML = msa_cds_trimmed + '.renamed.codeML.phy'

    with open(msa_cds_trimmed_phy,'r') as f_in:
        with open(msa_cds_trimmed_phy_codeML,'w') as f_out: 
            line = next(f_in)
            line_out = line.strip('\n') + ' I\n'
            f_out.write(line_out)
            for line in f_in:
                f_out.write(line)



