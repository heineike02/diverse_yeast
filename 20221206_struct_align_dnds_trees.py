#Make trimmed alignments compatible with paml from structural MSAs generated by Nir
#
#First make a strict trimming with clipkit
#
#Then thread the nucleic acid and convert to a phylip format 
#
#Input: og
#
#Output: 
#  Strictly trimmed protein alignment and codon alignment (used as input for codemL)
#  Phylip file used as input for Codon alignment. 

#import sys
import os
import subprocess
from Bio import SeqIO
import pandas as pd
import shutil

base_dir = os.path.normpath('/home/heineikeb/alphafold')
#os.path.normpath('/home/heineike_wsl2/alphafold') #Ben's computer

aln_dir = base_dir + os.sep + os.path.normpath('msas/structural/tm_align/fasta_renamed') 
                                     
align_files = os.listdir(aln_dir)
selected_og_refs = [fname.split('.')[0] for fname in align_files]

#os.path.normpath('/home/heineike_wsl2/Crick_LMS/projects/diverse_yeasts/alphafold')
# output_dir = base_dir + os.sep + os.path.normpath('selection_calculations/20220526_sel_calc')

#selected_ogs = ['OG2645'] #'OG4150', 'OG2603', 'OG3677', 'OG2845']

#selected_og_refs = ['OG4150_REF_Scer_AF-P07256-F1-model_v2'] #, 'OG2603_REF_Scer_AF-P50076-F1-model_v2', 'OG2845_REF_Scer_AF-P43577-F1-model_v2', 'OG3677_REF_Scer_AF-P47125-F1-model_v2', 'OG1299_REF_Scer_AF-P00549-F1-model_v2']

for jj, og_ref in enumerate(selected_og_refs): 
    print(og_ref + ' ' + str(jj) + ' of ' + str(len(selected_og_refs)))
    #og_ref = 'OG4150_REF_Scer_AF-P07256-F1-model_v2'
    og,ref = og_ref.split('_REF_')
    og_pep_msa_fname = aln_dir + os.sep + og_ref + '.tm.fasta'

    #trim alignment with default settings and outputs log file
    clipkit_cmd = ['clipkit', og_pep_msa_fname, '-l']
    subprocess.run(clipkit_cmd)

    #Move log and output

    suffixes = ['.clipkit','.clipkit.log' ]

    for suffix in suffixes: 
        #Move clipkit files to new folder
        shutil.move(og_pep_msa_fname + suffix, 
                        base_dir + os.sep + os.path.normpath('msas/structural/tm_align/trim_default/' + og_ref + '.tm.fasta' + suffix)
                       )

    og_pep_msa_fname_trimmed = base_dir + os.sep + os.path.normpath('msas/structural/tm_align/trim_default/' + og_ref + '.tm.fasta.clipkit')

    # Run iQtree on trimmed peptide MSA  
    # Should I run with a pombe outgroup? 
    iqtree_command = ["iqtree", 
                      "-s" , og_pep_msa_fname_trimmed,
                      #"-m", 'LG+I+G4',  #'MF', #only runs model finder 
                      "-nt", "7", #"AUTO"  automatically determines number of threads but 7 was performing well
                      "-bb", "1000",
                      "-alrt", "1000",
                      #"-o", 'Spom_AF-Q10208-F1-model_v2'  #Outgroup for rooting should be pombe  for now using default. 
                     ]
    print(" ".join(iqtree_command))

    subprocess.run(iqtree_command)

    #move treefiles to new directory
    for suffix in [ 'ckp.gz','iqtree', 'bionj','mldist', 'log', 'treefile', 'contree','model.gz','splits.nex']:
        fname_from = base_dir + os.sep + os.path.normpath('msas/structural/tm_align/trim_default/' + og_ref + '.tm.fasta.clipkit.' + suffix)
        fname_to = base_dir + os.sep + os.path.normpath('msas/structural/tm_align/trees/' + og_ref + '.tm.fasta.clipkit.' + suffix)
        shutil.move(fname_from, fname_to)

    #Format phylogenetic Tree for codeml by shortening the name

    # shorten name.  Uses seq_name_map made in in dnds_msas.py
    seq_name_map_fname = base_dir + os.sep +  os.path.normpath('msas/structural/tm_align/seq_name_map/' + og_ref + '.tm.tsv')

    #Use phykit rename_tree_tips to shorten the name
    tree_orig = base_dir + os.sep + os.path.normpath('msas/structural/tm_align/trees/' + og_ref + '.tm.fasta.clipkit.treefile')
    tree_renamed = tree_orig+'.renamed'
    phykit_rename_cmd = ['phykit', 'rename_tree_tips',
                 tree_orig,
                 '-i', seq_name_map_fname, 
                 '-o', tree_renamed
                ]

    print(" ".join(phykit_rename_cmd))

    subprocess.run(phykit_rename_cmd)



