#Make trees compatible with paml from structural MSAs generated by TMalign
#
# First does default trimming and then runs IQtree on trimmed alignments
# Finally makes the files compatible with codeml

#import sys
import os
import subprocess
from Bio import SeqIO
import pandas as pd
import shutil

base_dir = os.path.normpath('/home/heineikeb/alphafold')
#os.path.normpath('/home/heineike_wsl2/alphafold') #Ben's computer

aln_dir =  base_dir + os.sep + os.path.normpath('examples/etc/mitochondrial_sequences/pdbs')

#Select all alignments as none of these are filtered out for length

# #use /tm_align/cds_aln to pick the aligments as that is post filtering for alignments that become very short upon trimming
# align_files = os.listdir(aln_dir + os.sep + 'cds_aln')  
# selected_alignments_all = [fname.split('.')[0] for fname in align_files]

dir_list = os.listdir(aln_dir+os.sep + 'fasta_renamed')
selected_alignments_all = []

for fname in dir_list: 
    name, ext = os.path.splitext(fname)
    if ext=='.fasta':
        selected_alignments_all.append(name)


completed_alignments = [fname.split('.')[0] for fname in os.listdir(aln_dir + os.sep + 'trim_default')]
selected_alignments = list(set(selected_alignments_all)-set(completed_alignments))



#os.path.normpath('/home/heineike_wsl2/Crick_LMS/projects/diverse_yeasts/alphafold')
# output_dir = base_dir + os.sep + os.path.normpath('selection_calculations/20220526_sel_calc')

#selected_ogs = ['OG2645'] #'OG4150', 'OG2603', 'OG3677', 'OG2845']

#selected_og_refs = ['OG4150_REF_Scer_AF-P07256-F1-model_v2'] #, 'OG2603_REF_Scer_AF-P50076-F1-model_v2', 'OG2845_REF_Scer_AF-P43577-F1-model_v2', 'OG3677_REF_Scer_AF-P47125-F1-model_v2', 'OG1299_REF_Scer_AF-P00549-F1-model_v2']

min_seq = 4

trees_log_fname = aln_dir + os.sep + os.path.normpath('trees/trees_log.txt')

print(selected_alignments)

with open(trees_log_fname, 'w') as trees_log:

    for jj, alignment in enumerate(selected_alignments): 
        print(alignment + ' ' + str(jj) + ' of ' + str(len(selected_alignments)))
        #og_ref = 'OG4150_REF_Scer_AF-P07256-F1-model_v2'
        #og,ref = og_ref.split('_REF_')
        
        print('Trimming Alignment with default parameters')
        genename = alignment.split('_')[3]
        print(genename)
        og_pep_msa_fname = aln_dir + os.sep + 'fasta_renamed' + os.sep + alignment + '.fasta'

        #Verify that there are only sequences greater than or equal to min_seq. 
        og_pep_msa = SeqIO.parse(og_pep_msa_fname,'fasta')
        nseqs = len(list(og_pep_msa))    
        
        assert nseqs>=min_seq, alignment + ' has less than ' + str(min_seq) + 'sequences' 

        #trim alignment with default settings and outputs log file
        clipkit_cmd = ['clipkit', og_pep_msa_fname, '-l']
        
        print(clipkit_cmd)
        

        subprocess.run(clipkit_cmd)
         
        #Move log and output

        suffixes = ['.clipkit','.clipkit.log' ]

        for suffix in suffixes: 
            #Move clipkit files to new folder
            shutil.move(og_pep_msa_fname + suffix, 
                            aln_dir + os.sep + os.path.normpath('trim_default/' + genename + '.tm.fasta' + suffix)
                           )

            og_pep_msa_fname_trimmed = aln_dir + os.sep + os.path.normpath('trim_default/' + genename + '.tm.fasta.clipkit')

        # Run iQtree on trimmed peptide MSA  
        # Should I run with a pombe outgroup? 
        
        print('Building Protein Tree')

        iqtree_command = ["iqtree", 
                          "-s" , og_pep_msa_fname_trimmed,
                          #"-m", 'LG+I+G4',  #'MF', #only runs model finder 
                          "-nt", "7", #"AUTO"  automatically determines number of threads but 7 was performing well
                          "-bb", "1000",
                          "-alrt", "1000",
                          #"-o", 'Spom_AF-Q10208-F1-model_v2'  #Outgroup for rooting should be pombe  for now using default. 
                         ]
        #print(" ".join(iqtree_command))

        subprocess.run(iqtree_command)

        #move treefiles to new directory
        
        tree_output_files = os.listdir(aln_dir + os.sep + os.path.normpath('trim_default'))

        for suffix in [ 'ckp.gz','iqtree', 'bionj','mldist', 'log', 'treefile', 'contree','model.gz','splits.nex','uniqueseq.phy']:
            fname_from = genename + '.tm.fasta.clipkit.' + suffix

            if fname_from in tree_output_files: 
                fname_from_full = aln_dir + os.sep + os.path.normpath('trim_default/' + fname_from)            
                fname_to = aln_dir + os.sep + os.path.normpath('trees/' + genename + '.tm.fasta.clipkit.' + suffix)
                shutil.move(fname_from_full, fname_to)
            
        # #Format phylogenetic Tree for codeml by shortening the name
        # If I do this will need to change alignment to genename

        # # shorten name.  Uses seq_name_map made in in dnds_msas.py
        # print('Formatting tree for Codeml')
        # seq_name_map_fname = aln_dir + os.sep +  os.path.normpath('seq_name_map/' + alignment + '.tm.tsv')

        # #Use phykit rename_tree_tips to shorten the name
        # tree_orig = aln_dir + os.sep + os.path.normpath('trees/' + alignment + '.tm.fasta.clipkit.treefile')
        # tree_renamed = tree_orig+'.renamed'
        # phykit_rename_cmd = ['phykit', 'rename_tree_tips',
        #                  tree_orig,
        #                  '-i', seq_name_map_fname, 
        #                  '-o', tree_renamed
        #                 ]

        # #print(" ".join(phykit_rename_cmd))

        # subprocess.run(phykit_rename_cmd)

        #else: 
        #   trees_log.write(alignment + ' has less than ' + str(min_seq) + ' sequences. No tree created.\n')
